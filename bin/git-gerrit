#! /usr/bin/env python3

import re
import json
import argparse
import subprocess
from typing import TypedDict

class GerritCurrentPatchSet(TypedDict):
    ref: str

class GerritQueryResult(TypedDict):
    url: str
    currentPatchSet: GerritCurrentPatchSet
    number: int
    project: str
    status: str

def _run(cmd: list[str]) -> str:
    return subprocess.run(cmd, capture_output=True, text=True, check=True).stdout.strip()

def _get_gerrit_host() -> str | None:
    host = _run(['git', 'config', '--get', 'remote.origin.url']).split(':')[0]

    # Test if gerrit_host points to a Gerrit server via SSH
    if 'gerrit' not in host:
        return

    try:
        _run(['ssh', host, 'gerrit', 'version'])
        return host
    except subprocess.CalledProcessError:
        pass

def _get_change_id() -> str | None:
    for line in _run(['git', 'log', '--format=%B', '-n', '1']).splitlines():
        if m := re.search('Change-Id: (.*)', line):
            return m.group(1)
    return None

def _pull():
    if not (host := _get_gerrit_host()):
        return

    if not (changeid := _get_change_id()):
        return

    result = _run(
        [
            "ssh",
            host,
            "gerrit",
            "query",
            changeid,
            "--current-patch-set",
            "--format=JSON",
        ]
    ).splitlines()[0]

    obj: GerritQueryResult = json.loads(result)
    prj = obj['project']
    ref = obj['currentPatchSet']['ref']

    cmd = ['git', 'pull', f'ssh://{host}:29418/{prj}', ref]
    print(" ".join(cmd))
    subprocess.run(cmd, check=True)

def main():
    parser = argparse.ArgumentParser(description='Gerrit utility script')
    subparsers = parser.add_subparsers(dest='command', required=True)
    _pull_parser = subparsers.add_parser('pull', help='Pull the current Gerrit patchset')

    args = parser.parse_args()

    if args.command == 'pull':
        _pull()

if __name__ == '__main__':
    main()
