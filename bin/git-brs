#! /usr/bin/env python3

import re
import shlex
import json

import subprocess

from typing import TypedDict

ARROW = '\uf553'
THIS = '\uf111'

BLUE = '\033[94m'
CYAN = '\033[96m'
GREEN = '\033[92m'
WARNING = '\033[93m'
RED = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
GREY = '\033[90m'

# hyperlinks
OSC8_1 = '\033]8;;'
OSC8_2 = '\033\\'
OSC8_3 = '\033]8;;\033\\'

def _run(cmd: str|list[str]) -> str:
    if isinstance(cmd, str):
        cmd = shlex.split(cmd)
    return subprocess.run(cmd, capture_output=True, text=True, check=True).stdout.strip()

def _get_prs() -> str:
    try:
        return _run([
            'gh', 'pr', 'list',
            '--json', 'headRefName,url,isDraft,state',
            '--template', '{{range .}}{{.headRefName}} {{.url}} {{.isDraft}} {{.state}}{{"\\n"}}{{end}}',
            '--state', 'all',
            '--limit', '300',
            '--author', '@me'
        ])
    except subprocess.CalledProcessError as e:
        return ''

def _get_pr(branch: str, prs: str) -> str:
    prinfo = next((line for line in prs.splitlines() if line.startswith(branch)), None)
    if not prinfo:
        return ''

    parts = prinfo.split()
    url = parts[1]
    isdraft = parts[2] == 'true'
    state = parts[3]

    draft = '[DRAFT]' if isdraft else ''
    state_color = {
        'MERGED': 'green',
        'OPEN': 'blue',
        'CLOSED': 'red'
    }.get(state, 'white')

    if branch in ['master', 'main'] and state != 'OPEN':
        return ''

    return f'\n      %(color:{state_color}){state}{draft}: %(color:cyan){url}'

def _process_branch(branch: str, prs: str, gerrit_host: str | None):
    upstream = _run(f'git branch --list {branch} --format=%(upstream:short)')
    upstream_track = (
        _run(f"git branch --list {branch} --format=%(upstream:track)")
        .replace("ahead ", "↑")
        .replace("behind ", "↓")
        .replace(", ", "")[1:-1]
    )

    prline = _get_pr(branch, prs)
    date = _run(f'git log -1 --format=%cd --date=relative {branch}')

    branch_info = _run([
        'git',
        'branch',
        '--color=always',
        '--list',
        '--format',
         f'%(color: bold green)%(if)%(HEAD)%(then){THIS} %(else)  %(end)'
         + f'%(color:yellow)%(refname:short)%(color:reset) {ARROW} '
         + '%(color:blue)%(upstream:short) '
         + f'%(color:white){upstream_track} '
         + f'%(color:magenta)({date}){prline}',
         branch
    ])

    print(branch_info)

    if gerrit_host:
        _gerrit_info(gerrit_host, branch)

    if upstream and upstream_track != '[gone]':
        commits = _run(f'git --no-pager log --format=%s {upstream}..{branch}').splitlines()
        for commit in commits:
            print(f'    {commit}')

def _get_change_id(branch: str) -> str | None:
    for line in _run(f'git log --format=%B -n 1 {branch}').splitlines():
        m = re.search('Change-Id: (.*)', line)
        if m:
            return m.group(1)
    else:
        return None

class GerritApprovalBy(TypedDict):
    name: str
    email: str
    username: str

class GerritApproval(TypedDict):
    type: str
    value: str
    by: GerritApprovalBy

class GerritCurrentPatchSet(TypedDict):
    approvals: list[GerritApproval]

class GerritQueryResult(TypedDict):
    url: str
    currentPatchSet: GerritCurrentPatchSet
    number: int
    project: str

def _link(text: str, url: str) -> str:
    return f'{UNDERLINE}{OSC8_1}{url}{OSC8_2}{text}{OSC8_3}'

def _gerrit_info(host: str, branch: str):
    changeid = _get_change_id(branch)

    result = _run(
        f'ssh {host} gerrit query {changeid} --current-patch-set --format=JSON'
    ).splitlines()[0]
    obj: GerritQueryResult = json.loads(result)
    url = obj['url']
    approvals = obj['currentPatchSet'].get('approvals', [])
    approvals1: dict[str,dict[str,str]] = {}
    for approval in approvals:
        value = approval['value']
        type = approval['type']
        name = approval['by']['name']
        if type not in approvals1:
            approvals1[type] = {}
        approvals1[type][name] = value

    def fmt_approval(name: str, value: str):
        pos = int(value) > 0
        color = GREEN if pos else RED
        v = f'+{value}' if pos else f'{value} ({name})'
        return f'{color}{v}'

    def fmt_label(label: str, approvals: dict[str,str]):
        abbreviated_label = ''.join(word[0] for word in label.split('-'))
        values = f', '.join(fmt_approval(name, value) for name, value in approvals.items())

        fail = False
        for _, value in approvals.items():
            if int(value) < 0:
                fail = True
                break

        if fail:
            return f'{RED}{abbreviated_label}: [{values}]{ENDC}'
        return f'{GREEN}{abbreviated_label}{ENDC}'

    id = obj['number']
    ln = _link(f'{host}/{id}', url)
    print(f'      {BLUE}GERRIT: {ENDC}{ln}{ENDC} ', end ='')
    print(f'{BLUE},{ENDC} '.join(fmt_label(label, approvals) for label, approvals in approvals1.items()))

def _get_gerrit_host() -> str | None:
    host = _run('git config --get remote.origin.url').split(':')[0]

    # Test if gerrit_host points to a Gerrit server via SSH
    if 'gerrit' not in host:
        return

    try:
        _run(f'ssh {host} gerrit version')
        return host
    except subprocess.CalledProcessError:
        pass

def main():
    prs = _get_prs()
    result = _run('git for-each-ref --shell --format=%(refname:short) refs/heads').splitlines()
    branches = [re.sub(r'^\'|\'$', '', entry.strip()) for entry in result]

    gerrit_host = _get_gerrit_host()
    for branch in branches:
        _process_branch(branch, prs, gerrit_host)

if __name__ == '__main__':
    main()

